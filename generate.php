<?php

if ( getenv( 'MW_INSTALL_PATH' ) !== false ) {
	$IP = getenv( 'MW_INSTALL_PATH' );
} else {
	$IP = __DIR__ . '/../..';
}
require "$IP/maintenance/CommandLineInc.php";

use Wikimedia\IPSet;
use Wikimedia\IPUtils;
use Wikimedia\StaticArrayWriter;

$inFileName = __DIR__ . '/trusted-hosts.txt';
$inFile = fopen( $inFileName, 'r' );
if ( !$inFile ) {
	echo "Unable to open input file \"$inFileName\"\n";
	exit( 1 );
}

$lineNum = 0;
$numHosts = 0;
$ranges = [];
$names = [];

while ( !feof( $inFile ) ) {
	$line = fgets( $inFile );
	$lineNum++;
	if ( $line === false ) {
		break;
	}
	// Remove comment
	$hashPos = strpos( $line, '#' );
	if ( $hashPos !== false ) {
		$line = substr( $line, 0, $hashPos );
	}
	// Strip spaces
	$line = trim( $line );

	if ( $line === '' ) {
		// Comment or blank line
		continue;
	}

	[ $start, ] = IPUtils::parseRange( $line );
	if ( $start === false ) {
		// Try DNS
		$names[] = [ $lineNum, $line ];
		continue;
	}
	$ranges[] = $line;
}

echo count( $names ) . " DNS queries to do...\n";
foreach ( $names as $i => $nameInfo ) {
	[ $lineNum, $name ] = $nameInfo;
	$ips = gethostbynamel( $name );
	if ( $ips === false ) {
		echo "Not a valid host or IP address on line $lineNum: $name\n";
	} else {
		$ranges = array_merge( $ranges, $ips );
	}
	showProgress( $i, count( $names ) );
	// Don't DoS the recursor
	usleep( 10000 );
}
echo "\n";

natsort( $ranges );
$ranges = array_values( array_unique( $ranges ) );

$header = sprintf( "Generated by %s/%s on %s;\nNote this file is deprecated in favour of trusted-hosts.json.",
	basename( __DIR__ ),
	basename( __FILE__ ),
	gmdate( 'c' )
);

$values = array_values( $ranges );

$writer = new StaticArrayWriter();
file_put_contents(
	__DIR__ . '/trusted-hosts.php',
	$writer->create( $values, $header )
);

file_put_contents(
	__DIR__ . '/trusted-hosts.json',
	json_encode( new IPSet( $values ) )
);

$count = count( $ranges );
echo "$count ips or ranges listed\n";

/**
 * @param int $current
 * @param int $total
 */
function showProgress( $current, $total ) {
	$length = 50;
	$dots = intval( ( $current + 1 ) / $total * $length );
	printf( "%6.2f%%  [" .
		str_repeat( '=', $dots ) . str_repeat( '.', $length - $dots ) . "]\r",
		( $current + 1 ) / $total * 100
	);
}
